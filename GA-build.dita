<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="building-output-with-github-actions">
    <title>DITA CI/CD with GitHub Actions</title>
  <shortdesc>GitHub Actions are a quick and easy way to automate build outputs form DITA content
    stored in a GitHub repository. </shortdesc>
    <body>
        <p>The following code is a simple GitHub Actions workflow that builds HTML5 files from DITA
      content and deposits them in a branch called <i>published</i>. This build is kicked off  on
      push or on pull_requests to a the <codeph>main</codeph> branch. It is also possible to
      configure a cron job to run the build at a specific time, or to run the build manually.</p>
        <codeblock xml:space="preserve" outputclass="yaml">name: site-build

# Controls when the action will run. 
on:

  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]

jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Build HTML5
        id: DITA-build
        uses: dita-ot/dita-build-action@master
        with:
          install: |
            dita install fox.jason.extend.css
            dita install net.infotexture.dita-bootstrap
            dita install fox.jason.prismjs
          build:  |
            dita --project=myproject.xml          
      - name: Upload DITA
        id: upload
        uses: actions/upload-artifact@v2
        with:
          name: dita-artifact
          path: ‘out’
      - name: Deploy
        id: deploy
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: published # The branch the action should deploy to.
          FOLDER: out # The folder the action should deploy.
          TARGET-FOLDER: docs          </codeblock>
    <p>The <codeph>jobs</codeph> section of the workflow file spins up an Ubuntu Linux instance and
      then runs a series of steps:</p>
    <ol>
      <li>
        <p>The first step, <codeph>Git checkout</codeph>, is a GitHub-provided action that checks
          out the current branch.</p>
      </li>
      <li>
        <p>The real work is done by the next step, <codeph>Build HTML5</codeph>. It uses the
            <codeph>dita-build-action</codeph> GitHub Action created by <xref keyref="jason-fox"/>
          which downloads the latest version of the DITA Open Toolkit, installs 3 required plugins
          from the DITA-OT plugin registry, and runs the build instruction using the
            <codeph>myproject.xml</codeph> project file stored in the branch. The
            <codeph>myproject.xml</codeph> project file contains all the information on the source
          ditamap, output transtype, output folder, filter files, and any build parameters. For more
          information on configuring project files, see <xref keyref="project-files"/>.</p>
      </li>
      <li>
        <p>The third step, <codeph>Upload DITA</codeph>, uploads the files outputted by the build to
          a folder called <codeph>out</codeph>.</p>
      </li>
      <li>
        <p>The last step, Deploy uses a GitHub action written by <xref keyref="james-ives"/>
          originally meant to deploy content to a GitHub Pages branch but used here to move the
          content of the <codeph>out</codeph> folder on the <codeph>main</codeph> branch to the
            <codeph>docs</codeph> folder in the <codeph>published</codeph> branch. From there web
          hooks could be employed to upload the content to a service like Netlify.</p>
      </li>
    </ol>
    <section id="section_sbd_ppc_5wb">
      <title>Manual builds</title>
      <p>The example above runs when a content is pushed to the <tt>main</tt> branch. When you are
        testing builds, it's easier to run builds manually. Adding the <tt>workflow_dispatch</tt>
        event trigger to your workflow file allows you to build manually by clicking <b>Run
          workflow</b> on the <b>Actions</b> tab in the GitHub UI.</p>
      <codeblock outputclass="yaml">name: site-build

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

...</codeblock>
    </section>
    <section id="section_tcs_5pc_5wb">
      <title>Timed builds with cron</title>
      <p>In a mature CI/CD docs environment, documentation can be built and deployed on a regular,
        perhaps daily, basis. Workflows can integrate cron jobs that kick off the builds on
        specified days and times. The example below runs the build every weekday night at 2am:</p>
      <codeblock outputclass="yaml">name: site-build

on:
  schedule:
    # Runs "at 02:00 every Mon-Fri"
    - cron: '* 2 * * 1-5'

...</codeblock>
      <note>For help with cron notation, <xref href="https://crontab.guru/" format="html"
          scope="external"/> is useful resource.</note>
    </section>
    </body>
</topic>
